{
	"openapi": "3.0.3",
	"info": {
		"title": "xaro",
		"version": "0.0.1"
	},
	"servers": [],
	"components": {
		"schemas": {
			"fileRecord": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer"
					},
					"originalFileID": {
						"type": "integer",
						"nullable": true
					},
					"generatedFromFileID": {
						"type": "integer",
						"nullable": true
					},
					"kind": {
						"type": "string",
						"enum": ["original", "optimised"]
					},
					"label": {
						"type": "string",
						"nullable": true
					},
					"libraryPath": {
						"type": "string",
						"nullable": true
					},
					"formatID": {
						"type": "integer"
					},
					"size": {
						"type": "integer"
					},
					"fileHash": {
						"type": "string"
					},
					"dataHash": {
						"type": "string",
						"nullable": true
					},
					"dateAdded": {
						"type": "integer"
					},
					"dateTrashed": {
						"type": "integer",
						"nullable": true
					}
				},
				"required": [
					"id",
					"originalFileID",
					"generatedFromFileID",
					"kind",
					"label",
					"libraryPath",
					"formatID",
					"size",
					"fileHash",
					"dataHash",
					"dateAdded",
					"dateTrashed"
				]
			},
			"mediaFilesRecord": {
				"type": "object",
				"properties": {
					"media": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/fileRecord"
						}
					},
					"thumbnail": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/fileRecord"
						}
					},
					"videoPreview": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/fileRecord"
						}
					},
					"subtitles": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/fileRecord"
						}
					},
					"metadata": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/fileRecord"
						}
					},
					"dump": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/fileRecord"
						}
					}
				}
			},
			"platformMediaSourceRecord": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer"
					},
					"platformID": {
						"type": "integer"
					},
					"platformCommunityID": {
						"type": "integer",
						"nullable": true
					},
					"platformProfileID": {
						"type": "integer",
						"nullable": true
					},
					"metadata": {
						"type": "object"
					},
					"sourceId": {
						"type": "string"
					},
					"sourceUrl": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"id",
					"platformID",
					"platformCommunityID",
					"platformProfileID",
					"metadata",
					"sourceId",
					"sourceUrl"
				]
			},
			"mediaSourceRecord": {
				"type": "object",
				"nullable": true,
				"anyOf": [
					{
						"$ref": "#/components/schemas/platformMediaSourceRecord"
					}
				]
			},
			"fullMediaRecord": {
				"type": "object",
				"properties": {
					"source": {
						"$ref": "#/components/schemas/mediaSourceRecord"
					},
					"sorting": {
						"type": "object",
						"properties": {
							"tags": {
								"type": "array",
								"items": {
									"type": "string",
									"uniqueItems": true
								}
							}
						}
					},
					"files": {
						"$ref": "#/components/schemas/mediaFilesRecord"
					}
				}
			}
		},
		"responses": {
			"userNotAuthorised": {
				"description": "Unauthorized. Either the bearer token has expired, does not exist, or was encoded using an outdated secret key, or the user no longer exists even though the bearer token was valid at a previous point in time."
			},
			"unexpectedServerError": {
				"description": "An unexpected server error occurred."
			},
			"userLacksPrivileges": {
				"description": "The authenticated user lacks the necessary privileges to make this request."
			}
		},
		"securitySchemes": {
			"basicHttpAuthentication": {
				"type": "http",
				"scheme": "Basic",
				"description": "Basic HTTP user authentication."
			},
			"bearerHttpAuthentication": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "jwt",
				"description": "Bearer (JWT) HTTP user authentication."
			}
		}
	},
	"paths": {
		"/user/register": {
			"post": {
				"description": "Creates a new user account.",
				"security": [
					{
						"basicHttpAuthentication": []
					}
				],
				"responses": {
					"201": {
						"description": "New user account registered successfully.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"username": {
											"type": "string"
										},
										"userID": {
											"type": "integer"
										}
									}
								}
							}
						}
					},
					"409": {
						"description": "Username is taken."
					},
					"422": {
						"description": "The request 'Basic' auth is invalid."
					},
					"400": {
						"description": "Invalid registration input.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"usernameValidationError": {
											"nullable": true,
											"type": "object",
											"properties": {
												"invalidLength": {
													"type": "string",
													"enum": ["too_long", "too_short"],
													"nullable": true
												},
												"invalidChars": {
													"type": "string",
													"nullable": true
												}
											}
										},
										"passwordValidationError": {
											"nullable": true,
											"type": "object",
											"properties": {
												"invalidLength": {
													"type": "string",
													"nullable": true,
													"enum": ["too_long", "too_short"]
												},
												"invalidChars": {
													"type": "string",
													"nullable": true
												}
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "The request is missing a 'Basic' auth header."
					},
					"500": {
						"$ref": "#/components/responses/unexpectedServerError"
					}
				}
			}
		},
		"/user/logout": {
			"post": {
				"description": "Logs out the user (removes any authentication tokens assigned to the requester).",
				"responses": {
					"205": {
						"description": "User logged out."
					}
				}
			}
		},
		"/user/login": {
			"post": {
				"description": "Logs in the user matching the provided credentials (if correct of course).",
				"security": [
					{
						"basicHttpAuthentication": []
					}
				],
				"responses": {
					"400": {
						"description": "No username provided."
					},
					"401": {
						"description": "User not found, or the username and password don't match, or request does not include a 'Basic' auth header."
					},
					"422": {
						"description": "The request 'Basic' auth is invalid."
					},
					"200": {
						"description": "User logged in.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"description": "Unique identifiable user details.",
									"properties": {
										"userID": {
											"type": "number"
										},
										"username": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/user/about": {
			"get": {
				"description": "Gets details about the currently logged-in user.",
				"security": [
					{
						"bearerHttpAuthentication": []
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"id": {
											"type": "number"
										},
										"username": {
											"type": "string"
										},
										"role": {
											"type": "integer",
											"enum": [1, 2]
										},
										"usesAuthentication": {
											"type": "boolean"
										},
										"dateAdded": {
											"type": "number"
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/userNotAuthorised"
					},
					"500": {
						"$ref": "#/components/responses/unexpectedServerError"
					}
				}
			}
		},
		"/media/{media_id}/about": {
			"get": {
				"parameters": [
					{
						"name": "media_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "number"
						}
					}
				],
				"security": [
					{
						"bearerHttpAuthentication": []
					}
				],
				"responses": {
					"200": {
						"description": "OK.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/fullMediaRecord"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/userLacksPrivileges"
					},
					"404": {
						"description": "The Media does not exist."
					},
					"403": {
						"description": "The authenticated user does not have access permissions to the Media."
					},
					"422": {
						"description": "The 'media_id' parameter provided is not an integer."
					},
					"500": {
						"$ref": "#/components/responses/unexpectedServerError"
					}
				}
			}
		},
		"/media/upload": {
			"post": {
				"description": "Upload a single media item.",
				"security": [
					{
						"bearerHttpAuthentication": []
					}
				],
				"responses": {
					"201": {
						"description": "Media successfully uploaded."
					},
					"409": {
						"description": "Duplicate media was found. The user has been linked to the existing media, but no new original file has been imported."
					},
					"401": {
						"$ref": "#/components/responses/userLacksPrivileges"
					},
					"400": {
						"description": "No files were uploaded."
					},
					"500": {
						"$ref": "#/components/responses/unexpectedServerError"
					}
				}
			}
		}
	}
}
