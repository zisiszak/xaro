/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/user/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Creates a new user account. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description New user account registered successfully. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            username?: string;
                            userID?: number;
                        };
                    };
                };
                /** @description Invalid registration input. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            usernameValidationError?: {
                                /** @enum {string|null} */
                                invalidLength?: "too_long" | "too_short" | null;
                                invalidChars?: string | null;
                            } | null;
                            passwordValidationError?: {
                                /** @enum {string|null} */
                                invalidLength?: "too_long" | "too_short" | null;
                                invalidChars?: string | null;
                            } | null;
                        };
                    };
                };
                /** @description The request is missing a 'Basic' auth header. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Username is taken. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The request 'Basic' auth is invalid. */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["unexpectedServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Logs out the user (removes any authentication tokens assigned to the requester). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User logged out. */
                205: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Logs in the user matching the provided credentials (if correct of course). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User logged in. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            userID?: number;
                            username?: string;
                        };
                    };
                };
                /** @description No username provided. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User not found, or the username and password don't match, or request does not include a 'Basic' auth header. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The request 'Basic' auth is invalid. */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/about": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets details about the currently logged-in user. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id?: number;
                            username?: string;
                            /** @enum {integer} */
                            role?: 1 | 2;
                            usesAuthentication?: boolean;
                            dateAdded?: number;
                        };
                    };
                };
                401: components["responses"]["userNotAuthorised"];
                500: components["responses"]["unexpectedServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{media_id}/about": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    media_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["fullMediaRecord"];
                    };
                };
                401: components["responses"]["userLacksPrivileges"];
                /** @description The authenticated user does not have access permissions to the Media. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The Media does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The 'media_id' parameter provided is not an integer. */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["unexpectedServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upload a single media item. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media successfully uploaded. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No files were uploaded. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["userLacksPrivileges"];
                /** @description Duplicate media was found. The user has been linked to the existing media, but no new original file has been imported. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["unexpectedServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        fileRecord: {
            id: number;
            originalFileID: number | null;
            generatedFromFileID: number | null;
            /** @enum {string} */
            kind: "original" | "optimised";
            label: string | null;
            libraryPath: string | null;
            formatID: number;
            size: number;
            fileHash: string;
            dataHash: string | null;
            dateAdded: number;
            dateTrashed: number | null;
        };
        mediaFilesRecord: {
            media?: components["schemas"]["fileRecord"][];
            thumbnail?: components["schemas"]["fileRecord"][];
            videoPreview?: components["schemas"]["fileRecord"][];
            subtitles?: components["schemas"]["fileRecord"][];
            metadata?: components["schemas"]["fileRecord"][];
            dump?: components["schemas"]["fileRecord"][];
        };
        platformMediaSourceRecord: {
            id: number;
            platformID: number;
            platformCommunityID: number | null;
            platformProfileID: number | null;
            metadata: Record<string, never>;
            sourceId: string;
            sourceUrl: string | null;
        };
        mediaSourceRecord: components["schemas"]["platformMediaSourceRecord"] | null;
        fullMediaRecord: {
            source?: components["schemas"]["mediaSourceRecord"];
            sorting?: {
                tags?: string[];
            };
            files?: components["schemas"]["mediaFilesRecord"];
        };
    };
    responses: {
        /** @description Unauthorized. Either the bearer token has expired, does not exist, or was encoded using an outdated secret key, or the user no longer exists even though the bearer token was valid at a previous point in time. */
        userNotAuthorised: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description An unexpected server error occurred. */
        unexpectedServerError: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description The authenticated user lacks the necessary privileges to make this request. */
        userLacksPrivileges: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
